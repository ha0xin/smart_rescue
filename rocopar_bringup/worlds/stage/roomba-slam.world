show_clock 0
show_clock_interval 10000
interval_sim 50  # simulation timestep in milliseconds
resolution 0.02
threads 20
speedup 1.000

# configure the GUI window
window
(
  size [ 800.00 800.00 ] # in pixels

  # Camera options 
  scale 100                # pixels per meter   
  center [ 6.5  5.0 ]
  rotate [ 0.000  0.000 ]

  # GUI options
  show_data 1              # 1=on 0=off
  show_flags 1
  show_blocks 1
  show_clock 1
  show_footprints 1
  show_grid 1
  show_trailarrows 0
  show_trailrise 0
  show_trailfast 0
  show_occupancy 0        
)

define floorplan model
(
  # sombre, sensible, artistic
  color "gray30"
 
  # most maps will need a bounding box
  boundary 1
 
  gui_nose 0
  gui_grid 0
  gui_outline 0
  gui_move 1
  gripper_return 0
  fiducial_return 0
  ranger_return 1
  obstacle_return 1
)

# load an environment bitmap
floorplan
( 
  name "obstacles"
  bitmap "../bitmaps/roomba-stage.png"
  size [13.00 10.00 1.00]
  pose [6.5 5.0 0.00 0.00]
)

# DO NOT use laser or laser1, maybe other names are also occupied.
define sick_laser ranger
(
  # ranger-specific properties
  sensor (
    size [0.0 0.0 0.1]
    range [0.0 10.0]
    fov 240.0
    samples 2000
  )

  # generic model properties with non-default values
  watts 10.0
  #color_rgba [ 0 1 0 0.15 ]
  color "random"

)

define agent position
(
  # position properties
  drive "omni"
  color "random"
  obstacle_return 1           	# Can hit things.
  ranger_return 5.0            	# reflects sonar beams
  blob_return 1               	# Seen by blobfinders  
  fiducial_return 1           	# Seen as "1" fiducial finders

  # actual size
  size [ 0.3 0.3 0.2 ]

  # velocity [ 0.0 0.0 0.0 0.0 ]

  localization "gps"
  localization_origin [ 0.0 0.0 0.0 0.0 ]

  # odometry error model parameters, 
  # only used if localization is set to "odom"
  odom_error [0.00 0.00 0.00 0.00]

  # only used if drive is set to "car"
  # wheelbase 1.0

  # [ xmin xmax ymin ymax zmin zmax amin amax ]				
  velocity_bounds [-1 1 -1 1 -1 1 -45 45 ]					
  acceleration_bounds [-1 1 -1 1 -1 1 -45 45]

  # draw a nose on the robot so we can see which way it points
  gui_nose 1

  sick_laser(
    pose [ 0.1 0.1 0.1 0.0 ] 
    # ctrl "lasernoise" 
    alwayson 1
  )

)

# Build agent instances
agent( name "agent_0"  pose [2.0 2.0 0.0 0.0] )

