#For full documentation of the parameters in this file, and a list of all the
#parameters available for TrajectoryPlannerROS, please see
#http://www.ros.org/wiki/base_local_planner

TrajectoryPlannerROS:
  #Set the acceleration limits of the robot
  acc_lim_x: 2.5
  acc_lim_y: 2.5
  acc_lim_theta: 3.2 

  #Set the velocity limits of the robot
  max_vel_x: 0.5
  min_vel_x: 0.1
  max_vel_theta: 1.0
  min_vel_theta: 1.0
  min_in_place_vel_theta: 0.4

  #The velocity the robot will command when trying to escape from a stuck situation
  escape_vel: -0.1
  
  #For this example, we'll use a holonomic robot
  holonomic_robot: true

  #Since we're using a holonomic robot, we'll set the set of y velocities it will sample
  y_vels: [-0.3, -0.1, 0.1, -0.3]

  #Set the tolerance on achieving a goal
  xy_goal_tolerance: 0.1
  yaw_goal_tolerance: 0.05
  latch_xy_goal_tolerance: false  

  #We'll configure how long and with what granularity we'll forward simulate trajectories
  sim_time: 1.0
  sim_granularity: 0.025
  vx_samples: 3
  vtheta_samples: 20

  #Parameters for scoring trajectories
  goal_distance_bias: 0.8
  path_distance_bias: 0.6
  occdist_scale: 0.01
  heading_lookahead: 0.325

  #We'll use the Dynamic Window Approach to control instead of Trajectory Rollout for this example
  dwa: true

  #How far the robot must travel before oscillation flags are reset
  oscillation_reset_dist: 0.05

  #Eat up the plan as the robot moves along it
  prune_plan: true


DWAPlannerROS:
  acc_lim_th: 3.2
  acc_lim_x: 2.5
  acc_lim_y: 2.5

  max_vel_x: 0.65
  min_vel_x: 0.0

  max_vel_y: 0.1
  min_vel_y: -0.1

  max_trans_vel: 0.65
  min_trans_vel: 0.1

  max_rot_vel: 1.0
  min_rot_vel: 0.4

  sim_time: 1.7
  sim_granularity: 0.025

  goal_distance_bias: 32.0
  path_distance_bias: 24.0
  occdist_scale: 0.01

  stop_time_buffer: 0.2
  oscillation_reset_dist: 0.05

  forward_point_distance: 0.325

  scaling_speed: 0.25
  max_scaling_factor: 0.2

  vx_samples: 3
  vy_samples: 10
  vtheta_samples: 20

  sim_period: 0.1

  xy_goal_tolerance: 0.2
  yaw_goal_tolerance: 0.17

  rot_stopped_vel: 0.01
  trans_stopped_vel: 0.01


TebLocalPlannerROS:
  odom_topic: odom
      
  # Trajectory
  teb_autosize: True
  dt_ref: 0.3
  dt_hysteresis: 0.1
  max_samples: 500
  global_plan_overwrite_orientation: False
  allow_init_with_backwards_motion: True
  max_global_plan_lookahead_dist: 0.8   #0.5 0.8 1.0
  global_plan_viapoint_sep: -1
  global_plan_prune_distance: 1.0
  exact_arc_length: False
  feasibility_check_no_poses: 5
  publish_feedback: False
      
  # Robot     
  max_vel_x: 0.5
  max_vel_x_backwards: 0.3
  max_vel_y: 0.0
  max_vel_theta: 1.0 # the angular velocity is also bounded by min_turning_radius in case of a carlike robot (r = v / omega)
  acc_lim_x: 0.5
  acc_lim_theta: 0.5
  # GoalTolerance
  xy_goal_tolerance: 0.2
  yaw_goal_tolerance: 0.52359876
  free_goal_vel: False
  complete_global_plan: True
      
  # ********************** Carlike robot parameters ********************
  # max_steer_angle_=25 deg; r= wheelbase/tan(max_steer_angle_)=0.42890138
  min_turning_radius: 1.0    # Min turning radius of the carlike robot (compute value using a model or adjust with rqt_reconfigure manually)
  wheelbase: 0.2                 # Wheelbase of our robot
  cmd_angle_instead_rotvel: False # stage simulator takes the angle instead of the rotvel as input (twist message)
  # ********************************************************************
  footprint_model: # types: "point", "circular", "two_circles", "line", "polygon"
    type: "line"
    #radius: 0.2 # for type "circular"
    line_start: [0.0, 0.0] # for type "line"
    line_end: [0.2, 0.0] # for type "line"
    #front_offset: 0.2 # for type "two_circles"
    #front_radius: 0.2 # for type "two_circles"
    #rear_offset: 0.2 # for type "two_circles"
    #rear_radius: 0.2 # for type "two_circles"
    #vertices: [ [0.25, -0.05], [0.18, -0.05], [0.18, -0.18], [-0.19, -0.18], [-0.25, 0], [-0.19, 0.18], [0.18, 0.18], [0.18, 0.05], [0.25, 0.05] ] # for type "polygon"

  # Obstacles
  min_obstacle_dist: 0.03 # 0.05 0.08  0.1 This value must also include our robot's expansion, since footprint_model is set to "line".
  inflation_dist: 0.03
  include_costmap_obstacles: True
  costmap_obstacles_behind_robot_dist: 1.0
  obstacle_poses_affected: 15
  dynamic_obstacle_inflation_dist: 0.6
  include_dynamic_obstacles: True 

  costmap_converter_plugin: "costmap_converter::CostmapToPolygonsDBSMCCH"
  costmap_converter_spin_thread: True
  costmap_converter_rate: 5

  # Optimization
  no_inner_iterations: 5
  no_outer_iterations: 4
  optimization_activate: True
  optimization_verbose: False
  penalty_epsilon: 0.1
  obstacle_cost_exponent: 4
  weight_max_vel_x: 2
  weight_max_vel_theta: 1
  weight_acc_lim_x: 1
  weight_acc_lim_theta: 1
  weight_kinematics_nh: 1000
  weight_kinematics_forward_drive: 1
  weight_kinematics_turning_radius: 1
  weight_optimaltime: 1 # must be > 0
  weight_shortest_path: 0
  weight_obstacle: 150
  weight_inflation: 0.2
  weight_dynamic_obstacle: 10 # not in use yet
  weight_dynamic_obstacle_inflation: 0.2
  weight_viapoint: 2
  weight_adapt_factor: 2

  # Homotopy Class Planner
  enable_homotopy_class_planning: True
  enable_multithreading: True
  max_number_classes: 4
  selection_cost_hysteresis: 1.0
  selection_prefer_initial_plan: 0.95
  selection_obst_cost_scale: 1.0
  selection_alternative_time_cost: False

  roadmap_graph_no_samples: 15
  roadmap_graph_area_width: 5
  roadmap_graph_area_length_scale: 1.0
  h_signature_prescaler: 0.5
  h_signature_threshold: 0.1
  obstacle_heading_threshold: 0.45
  switching_blocking_period: 0.0
  viapoints_all_candidates: True
  delete_detours_backwards: True
  max_ratio_detours_duration_best_duration: 3.0
  visualize_hc_graph: False
  visualize_with_time_as_z_axis_scale: False

  # Recovery
  shrink_horizon_backup: True
  shrink_horizon_min_duration: 10
  oscillation_recovery: True
  oscillation_v_eps: 0.8
  oscillation_omega_eps: 0.8
  oscillation_recovery_min_duration: 5
  oscillation_filter_duration: 5